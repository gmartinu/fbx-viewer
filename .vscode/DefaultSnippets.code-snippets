{
  // Place your fivesys-web workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "TextField": {
    "prefix": "textfield",
    "body": [
      "<TextField",
      "  label='${label}'",
      "  money",
      "  onChange={(e) => handleChange(e, setState)}",
      "  name='${variavel}'",
      "  value={state.${variavel}}",
      "/>"
    ]
  },
  "Autocomplete": {
    "prefix": "autocomplete",
    "body": [
      "<Autocomplete",
      "  getOptionLabel='descricao'",
      "  valueKey='id'",
      "  label='${label}'",
      "  name='${variavel}'",
      "  value={Number(state.${variavel})}",
      "  onChange={(e) => handleChange(e, setState)}",
      "  model={${modelo}}",
      "/>"
    ]
  },
  "DatePicker": {
    "prefix": "datepicker",
    "body": [
      "<DatePicker",
      "  label='${label}'",
      "  fullWidth",
      "  onChange={(e) => handleChange(e, setState)}",
      "  name='${variavel}'",
      "  value={state.${variavel}}",
      "/>"
    ]
  },
  "GridItem": {
    "prefix": "griditem",
    "body": ["<Grid item xs={${6}}>", " ", "</Grid>"]
  },
  "GridContainer": {
    "prefix": "gridcontainer",
    "body": ["<Grid container spacing={2}>", " ", "</Grid>"]
  },
  "Plano de Contas": {
    "prefix": "pdc",
    "body": [
      "<PlanoDeContaSelect",
      "  tipo={${1}} // 0 ou 1",
      // "  id={modalSec.id}",
      // "  open={modalSec.open}",
      // "  handleOpen={handleModalSec}",
      // "  mainId={1}",
      "  name='plano_de_contas'",
      "  value={state.plano_de_contas}",
      "  onChange={(e) => handleChange(e, setState)}",
      "/>"
    ]
  }
}
